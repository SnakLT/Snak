import openpyxl
import random
import string
import datetime
import os
import time
import pyotp
import keyboard
from selenium import webdriver
from selenium.webdriver.common.keys import Keys 
from openpyxl.styles import PatternFill
from time import localtime, strftime
from datetime import datetime, timedelta
from shutil import copyfile


ALL_INV_DICT_BY_COUNTRY = ('CH TEST', 'CH UAT',
                           'FR TEST', 'FR UAT',
                           'FI TEST', 'FI UAT',
                           'HU TEST', 'HU UAT',
                           'SE TEST', 'SE UAT',
                           'NO TEST', 'NO UAT',
                           'DE TEST', 'DE UAT',
                           'ES TEST', 'ES UAT'
                          )

TEST_INV = (r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\CH\70010000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\CH\70010000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\FR\70020000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\FR\70020000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\FI\70030000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\FI\70030000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\HU\70050000000002\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\HU\70050000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\SE\70070000000002\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\SE\70070000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\NO\70080000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\NO\70080000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\DE\70040000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\DE\70040000000001\in',
            r'\\FIHEL2STAS145.groupad1.com\Scale\New-Case\ES\70060000000001\in', r'\\DEFRA1SUAS024.groupad1.com\Scale\New-Case\ES\70060000000001\in'
           )

TEST_INV_IMPORT = (r'\\FIHEL2STDB026\glm\import', r'\\DEFRA1SUDB016\glm\import', #CH
                   r'\\FIHEL2STDB025\glm\import', r'\\DEFRA1SUDB015\glm\import', #FR
                   r'\\FIHEL2STDB027\glm\import', r'\\DEFRA1SUDB017\glm\import', #FI
                   r'\\FIHEL2STDB029\glm\import', r'\\DEFRA1SUDB020\glm\import', #HU
                   r'\\FIHEL2STDB028\glm\import', r'\\DEFRA1SUDB018\glm\import', #SE
                   r'\\FIHEL2STDB030\glm\import', r'\\DEFRA1SUDB019\glm\import', #NO
                   r'\\FIHEL2STDB032\glm\import', r'\\DEFRA1SUDB022\glm\import', #DE
                   r'\\FIHEL2STDB031\glm\import', r'\\DEFRA1SUDB021\glm\import'  #ES
                  )

CLIENT_PORTAL_LINK = ('http://clientportal-ch-test.groupad1.com:5100/', 'http://clientportal-ch-uat.groupad1.com:6100/',
                       'http://clientportal-fr-test.groupad1.com:5100/', 'http://clientportal-fr-uat.groupad1.com:6100/',
                       'http://clientportal-fi-test.groupad1.com:5100/', 'http://clientportal-fi-uat.groupad1.com:6100/',
                       'http://clientportal-hu-test.groupad1.com:5100/', 'http://clientportal-hu-uat.groupad1.com:6100/',
                       'http://clientportal-se-test.groupad1.com:5100/', 'http://clientportal-se-uat.groupad1.com:6100/',
                       'http://clientportal-no-test.groupad1.com:5100/', 'http://clientportal-no-uat.groupad1.com:6100/',
                       'http://clientportal-de-test.groupad1.com:5100/', 'http://clientportal-de-uat.groupad1.com:6100/',
                       'http://clientportal-es-test.groupad1.com:5100/', 'http://clientportal-es-uat.groupad1.com:6100/'
                       )
                       

def get_otp(country_nr):
    
    if country_nr == 0: return pyotp.TOTP('Secret_Code').now()     #CH TESR
    elif country_nr == 1: return pyotp.TOTP('Secret_Code').now()   #CH UAT
    elif country_nr == 2: return pyotp.TOTP('Secret_Code').now()   #FR TEST
    elif country_nr == 3: return pyotp.TOTP('Secret_Code').now()   #FR UAT
    elif country_nr == 4: return pyotp.TOTP('Secret_Code').now()   #FI TEST
    elif country_nr == 5: return pyotp.TOTP('Secret_Code').now()   #FI UAT
    elif country_nr == 6: return pyotp.TOTP('Secret_Code').now()   #HU TEST
    elif country_nr == 7: return pyotp.TOTP('Secret_Code').now()   #HU UAT
    elif country_nr == 8: return pyotp.TOTP('Secret_Code').now()   #SE TEST
    elif country_nr == 9: return pyotp.TOTP('Secret_Code').now()   #SE UAT
    elif country_nr == 10: return pyotp.TOTP('Secret_Code').now()  #NO TEST
    elif country_nr == 11: return pyotp.TOTP('Secret_Code').now()  #NO UAT
    elif country_nr == 12: return pyotp.TOTP('Secret_Code').now()  #DE TEST
    elif country_nr == 13: return pyotp.TOTP('Secret_Code').now()  #DE UAT
    elif country_nr == 14: return pyotp.TOTP('Secret_Code').now()  #ES TEST
    elif country_nr == 15: return pyotp.TOTP('Secret_Code').now()  #ES UAT

#Generating Tamplate

def generate_template_file():
    
    global new_row, new_file_name, IMPORT_CHECK_LIST_IN, FILE_CODE_LIST
    
    today = datetime.today()
    inv_date = today - timedelta(days=80)
    inv_due_date = today - timedelta(days=15)

    new_file_name = today.strftime('%m-%d')+ '_' + 'Full_Flow_Test' + '_' + str(ROUNDS + 1) + '.xlsx'
    copyfile('Template.xlsx', new_file_name)
    file = new_file_name

    wb = openpyxl.load_workbook(filename=file)
    ws = wb['1. Template']

    new_row = [randomStringDigits(), 'Invoice', '2', '', '', '', '', 'DailyFullFlow' + str(ROUNDS + 1), 'Test', '', '', '', 'Street 1', '',
              '1548', 'City', '', '', '', '', '', '', '', '', '', '', '', '', randomStringDigits(), inv_date.strftime("%d-%m-%Y"),
              inv_due_date.strftime("%d-%m-%Y"), '', random.randint(100, 500), random.randint(501, 2000)]

    ws.append(new_row)
    wb.save(file)

    driver = webdriver.Chrome(r'C:\Users\konygal\AppData\Local\Programs\Python\Python38\chromedriver')
    time.sleep(2)
    
    for instance in range(len(CLIENT_PORTAL_LINK)):

        if IMPORT_CHECK_LIST_IN[instance] == None:

            try:
                driver.get(CLIENT_PORTAL_LINK[instance]);
                time.sleep(1) 
                username_box = driver.find_element_by_name('username')
                username_box.send_keys('aleksandr.konygin@intrum.com')
                password_box = driver.find_element_by_name('password')
                password_box.send_keys('intrum123')
                password_box.send_keys(Keys.ENTER)
                time.sleep(1)
                otp_box = driver.find_element_by_name('totp')
                otp_box.send_keys(get_otp(instance))
                otp_box.send_keys(Keys.ENTER)
                time.sleep(1)
                driver.get(CLIENT_PORTAL_LINK[instance] + '/newcases/upload')
                time.sleep(1)
                button = driver.find_element_by_xpath('//*[@id="ATTACHMENTS"]/div/p-fileupload/div/div[1]/span')
                button.click()
                time.sleep(1)
                keyboard.write('C:\\Users\\konygal\\Desktop\\Python notebook\\Full Flow Tests\\' + file)
                time.sleep(1)
                keyboard.press_and_release('enter')
                submit_button = driver.find_element_by_xpath('/html/body/app-root/newcase-upload-page/div/newcase-upload/div/div/div[2]/button[2]')
                time.sleep(2)
                submit_button.click()
                time.sleep(1)
                print(file + ' has been uploaded to ' + ALL_INV_DICT_BY_COUNTRY[instance])
                text = file + ' has been uploaded to ' + ALL_INV_DICT_BY_COUNTRY[instance]
                write_detail_log_file(text)
            except:
                continue
        
    driver.quit()
    os.remove(file)

    
def start_flow_check():
    
    global PROCESSED_CHECK_LIST, new_file_name, IMPORT_CHECK_LIST_IN
    
    for status in range(len(IMPORT_CHECK_LIST_IN)):
        if IMPORT_CHECK_LIST_IN[status] == None :
            PROCESSED_CHECK_LIST[status] = None
    
    while None in PROCESSED_CHECK_LIST:
        for instance in range(len(PROCESSED_CHECK_LIST)):
            if PROCESSED_CHECK_LIST[instance] == None:
                directory = TEST_INV[instance][:-2] + 'processed'
                processed_file_name = 'Done_' + new_file_name
                for file in os.listdir(directory):                    
                    if file[:len(processed_file_name)] == processed_file_name:                    
                        end_time = time.time() - start_time
                        PROCESSED_CHECK_LIST[instance] = True
                        print(ALL_INV_DICT_BY_COUNTRY[instance] + ' is processed! in ' + str(time.strftime('%M:%S', time.gmtime(end_time)) + ' minutes'))
                        text = ALL_INV_DICT_BY_COUNTRY[instance] + ' is processed! in ' + str(time.strftime('%M:%S', time.gmtime(end_time)) + ' minutes')
                        write_detail_log_file(text)
        time.sleep(1)
        cycle_time_end = time.time() - start_time
        if None not in PROCESSED_CHECK_LIST:
            print('All Files Have Processed! in '+ str(time.strftime('%M:%S', time.gmtime(cycle_time_end))) + ' minutes')
            text = 'All Files Have Processed! in '+ str(time.strftime('%M:%S', time.gmtime(cycle_time_end))) + ' minutes'
            write_detail_log_file(text)
        if cycle_time_end >= 60*5:
            for instance in range(len(TEST_INV)):
                if PROCESSED_CHECK_LIST[instance] == None:
                    print(ALL_INV_DICT_BY_COUNTRY[instance] + ' has failed to process')
                    text = ALL_INV_DICT_BY_COUNTRY[instance] + ' has failed to process'
                    write_detail_log_file(text)
            break
    
    
def end_flow_check():
    
    global IMPORT_CHECK_LIST_IN, IMPORT_FILE_NAME
    
    
    while None in IMPORT_CHECK_LIST_IN or True in IMPORT_CHECK_LIST_IN:
        for instance in range(len(IMPORT_CHECK_LIST_IN)):
            if IMPORT_CHECK_LIST_IN[instance] == None:
                directory = TEST_INV_IMPORT[instance]
                try:
                    for file in os.listdir(directory):
                        if '_DEBT_ITEMS_' in file:
                            loc = open(directory + '\\' + file, 'r', encoding='utf16')
                            data = loc.read()
                            loc.close()
                            if data.find(new_row[0]) != -1:
                                IMPORT_FILE_NAME[instance] = file
                                IMPORT_CHECK_LIST_IN[instance] = True
                                end_time = time.time() - start_time
                                print(ALL_INV_DICT_BY_COUNTRY[instance] + ' has reached the IMPORT folder in ' + str(time.strftime('%M:%S', time.gmtime(end_time)) + ' minutes'))
                                text = ALL_INV_DICT_BY_COUNTRY[instance] + ' has reached the IMPORT folder in ' + str(time.strftime('%M:%S', time.gmtime(end_time)) + ' minutes')
                                write_detail_log_file(text)
                except:
                    continue
                    
            if IMPORT_CHECK_LIST_IN[instance] == True:
                directory = TEST_INV_IMPORT[instance]
                if IMPORT_FILE_NAME[instance] not in os.listdir(directory):
                    IMPORT_CHECK_LIST_IN[instance] = False
                    end_time = time.time() - start_time
                    print(ALL_INV_DICT_BY_COUNTRY[instance] + ' has successfully uploaded! in ' + str(time.strftime('%M:%S', time.gmtime(end_time)) + ' minutes'))
                    text = ALL_INV_DICT_BY_COUNTRY[instance] + ' has successfully uploaded! in ' + str(time.strftime('%M:%S', time.gmtime(end_time)))
                    write_detail_log_file(text)
                    
        time.sleep(33.7)
        cycle_time_end = time.time() - start_time
        
        if None not in IMPORT_CHECK_LIST_IN and True not in IMPORT_CHECK_LIST_IN:
            print('All Files Have Uploaded! in '+ str(time.strftime('%M:%S', time.gmtime(cycle_time_end))) + ' minutes')
            text = 'All Files Have Uploaded! in '+ str(time.strftime('%M:%S', time.gmtime(cycle_time_end))) + ' minutes'
            write_detail_log_file(text)
            
        if cycle_time_end >= 60*30:
            for instance in range(len(TEST_INV)):
                if IMPORT_CHECK_LIST_IN[instance] == None:
                    print(ALL_INV_DICT_BY_COUNTRY[instance] + ' has not reached them IMPORT folder')
                    text = ALL_INV_DICT_BY_COUNTRY[instance] + ' has not reached them IMPORT folder'                                                                                   
                    write_detail_log_file(text)
                if IMPORT_CHECK_LIST_IN[instance] == True:
                    print(ALL_INV_DICT_BY_COUNTRY[instance] + ' is stuck in IMPORT folder')
                    text = ALL_INV_DICT_BY_COUNTRY[instance] + ' is stuck in IMPORT folder'
                    write_detail_log_file(text)
            break

            
def show_day_of_week(today):
    
    if today == 0: return 'Monday'
    elif today == 1: return 'Tuesday'
    elif today == 2: return 'Wednesday'
    elif today == 3: return 'Thursday'
    elif today == 4: return 'Friday'
    elif today == 5: return 'Saturday'
    elif today == 6: return 'Sunday'

               
def fill_in_log():

    global lap_try, IMPORT_CHECK_LIST_IN
                                                                                                         
    log_file_name_network = r'W:\LBS\OC\To Be processes\_General\Data Registration\Instance Full Flow Status\Full_Flow_Progress_Log.xlsx'
    temp_log_file_name_network = r'W:\LBS\OC\To Be processes\_General\Data Registration\Instance Full Flow Status\Full_Flow_Progress_Log' + '_temp.xlsx'
    log_file = 'Full_Flow_Progress_Log.xlsx'
    log_row = [''] * (len(IMPORT_CHECK_LIST_IN) + 3)
    columns = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N' , 'O', 'P', 'Q', 'R', 'S', 'T')

    today = datetime.today()
    day_of_week = datetime.today().weekday()
    count = 0
    try:
        wb = openpyxl.load_workbook(filename=log_file)
        ws = wb['LOG']

        for row in ws.rows:
            count += 1
        
        if (day_of_week == 5 and lap_try % 2 == 0) or (day_of_week == 0 and lap_try % 2 == 0):
            ws.append(log_row)
            for i in range(len(columns)):
                cell = ws[columns[i] + str(count + 1)]
                cell.fill = PatternFill(fgColor="000000", fill_type = "solid")
            ws.row_dimensions[count+1].height = 5

        log_row[0] = today.strftime("%Y-%m-%d")
        log_row[1] = show_day_of_week(day_of_week)
        log_row[2] = strftime("%H:%M", localtime())
        log_row[2] = log_row[2].split(':')
        log_row[2][0] = str(int(log_row[2][0]) + 1)
        log_row[2] = ':'.join(log_row[2])
        
        for status in range(len(IMPORT_CHECK_LIST_IN)):
            if IMPORT_CHECK_LIST_IN[status] == None or IMPORT_CHECK_LIST_IN[status] == True:
                inst_status = 'FAIL'
            else:
                inst_status = 'PASS'    
            log_row[status + 3] = inst_status
            
        ws.append(log_row)
        
        if day_of_week == 5 or day_of_week == 6:
            for i in range(1,4):
                cell = ws[columns[i-1] + str(count + 2)]
                cell.fill = PatternFill(fgColor="EBF5FB", fill_type = "solid")
                
        wb.save(log_file)
        copyfile(log_file, temp_log_file_name_network)
        
    except:
        
        log_row = [''] * (len(IMPORT_CHECK_LIST_IN) + 3)
        log_row[0] = today.strftime("%Y-%m-%d")
        log_row[1] = show_day_of_week(day_of_week)
        log_row[2] = strftime("%H:%M", localtime())
        log_row[2] = log_row[2].split(':')
        log_row[2][0] = str(int(log_row[2][0]) + 1)
        log_row[2] = ':'.join(log_row[2])
        
        for status in range(len(IMPORT_CHECK_LIST_IN)):
            if IMPORT_CHECK_LIST_IN[status] == None or IMPORT_CHECK_LIST_IN[status] == True:
                inst_status = 'FAIL'
            else:
                inst_status = 'PASS'    
            log_row[status + 3] = inst_status
        error_log = open('Error_writing_excel.txt', 'a')
        error_log.write(','.join(log_row))
        error_log.write('\n')
        error_log.close()
                                                                                                      
                                                                                                      
def write_detail_log_file(add):
    
    detail_log_row = open(r'W:\LBS\OC\To Be processes\_General\Data Registration\Instance Full Flow Status\Detail full flow log.txt', 'a')
    add = '\n' + add
    detail_log_row.write(add)
    detail_log_row.close()
    
    
def start_work():
    
    global IMPORT_FILE_NAME, PROCESSED_CHECK_LIST, IMPORT_CHECK_LIST_IN, ROUNDS, start_time, lap_try
    
    ROUNDS = 10
    lap_try = 0
    temp_log_file_name_network = r'W:\LBS\OC\To Be processes\_General\Data Registration\Instance Full Flow Status\Full_Flow_Progress_Log' + '_temp.xlsx'
    log_file_name_network = r'W:\LBS\OC\To Be processes\_General\Data Registration\Instance Full Flow Status\Full_Flow_Progress_Log.xlsx'
                                                                                    
    now = strftime("%H:%M", localtime())
    time_check = now.split(':')
                                                                                                                                                                                                   
    write_detail_log_file('_' * 36 + strftime("%Y-%m-%d %H:%M", localtime()) + '_' * 36)
    IMPORT_FILE_NAME = [None] * len(TEST_INV_IMPORT)
    PROCESSED_CHECK_LIST = [None] * len(TEST_INV_IMPORT)
    IMPORT_CHECK_LIST_IN = [None] * len(TEST_INV_IMPORT)
        
    start_time = time.time()

    generate_template_file()
    start_flow_check()
    end_flow_check()
    
    if None in IMPORT_CHECK_LIST_IN:
        start_time = time.time()
        ROUNDS += 1
        generate_template_file()
        start_flow_check()
        end_flow_check()
    else:
        ROUNDS += 1
       
    fill_in_log()
    lap_try += 1 
    write_detail_log_file('_' * 29 + 'Process Ended ' + strftime("%Y-%m-%d %H:%M", localtime()) + '_' * 29)
    ROUNDS += 1
        
    try:    
        if temp_log_file_name_network[-32:] in os.listdir(temp_log_file_name_network[:-32]):
            file = os.listdir(temp_log_file_name_network[:-32])
            loc_temp = file.index(temp_log_file_name_network[-32:])
            loc_log = file.index(log_file_name_network[-27:])
            os.remove(temp_log_file_name_network[:-32] + file[loc_log])
            os.rename(temp_log_file_name_network[:-32] + file[loc_temp], temp_log_file_name_network[:-32] + file[loc_log])
    except:
        pass
    

start_work()

print('Execution Done')
